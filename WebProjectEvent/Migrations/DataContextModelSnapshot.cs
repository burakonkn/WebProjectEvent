// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebProjectEvent.Models;

#nullable disable

namespace WebProjectEvent.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebProjectEvent.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AdminMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            AdminMail = "burakonkn@gmail.com",
                            AdminPassword = "1234",
                            AdminUsername = "Burak Onkun"
                        });
                });

            modelBuilder.Entity("WebProjectEvent.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Teknoloji",
                            CategoryUrl = "teknoloji"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Müzik",
                            CategoryUrl = "müzik"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Sanat",
                            CategoryUrl = "sanat"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "İş & Kariyer",
                            CategoryUrl = "is-kariyer"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Spor",
                            CategoryUrl = "spor"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Eğitim",
                            CategoryUrl = "egitim"
                        });
                });

            modelBuilder.Entity("WebProjectEvent.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("date");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EventIsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("EventIsHome")
                        .HasColumnType("bit");

                    b.Property<string>("EventLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EventPrice")
                        .HasColumnType("float");

                    b.Property<int>("EventSubscriber")
                        .HasColumnType("int");

                    b.Property<string>("EventTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            CategoryId = 1,
                            EventDate = new DateOnly(2025, 6, 15),
                            EventDescription = "Geleceğin teknolojileri ve yenilikçi çözümler üzerine kapsamlı konferans.",
                            EventImage = "event1.jpg",
                            EventIsActive = true,
                            EventIsHome = true,
                            EventLocation = "İstanbul Kongre Merkezi",
                            EventName = "Teknoloji Zirvesi 2024",
                            EventPrice = 250.0,
                            EventSubscriber = 500,
                            EventTime = "09:00 - 18:00",
                            LocationId = 1
                        },
                        new
                        {
                            EventId = 2,
                            CategoryId = 2,
                            EventDate = new DateOnly(2025, 7, 20),
                            EventDescription = "Yaz aylarının en büyük müzik festivali, 3 gün boyunca eğlence.",
                            EventImage = "event2.jpg",
                            EventIsActive = true,
                            EventIsHome = true,
                            EventLocation = "İzmir Kültürpark",
                            EventName = "Müzik Festivali",
                            EventPrice = 450.0,
                            EventSubscriber = 2000,
                            EventTime = "18:00 - 23:00",
                            LocationId = 3
                        },
                        new
                        {
                            EventId = 3,
                            CategoryId = 3,
                            EventDate = new DateOnly(2025, 8, 5),
                            EventDescription = "Çağdaş sanat eserlerinin sergileneceği özel etkinlik.",
                            EventImage = "event3.jpg",
                            EventIsActive = true,
                            EventIsHome = true,
                            EventLocation = "Ankara Sanat Galerisi",
                            EventName = "Sanat Sergisi",
                            EventPrice = 0.0,
                            EventSubscriber = 150,
                            EventTime = "10:00 - 18:00",
                            LocationId = 2
                        },
                        new
                        {
                            EventId = 4,
                            CategoryId = 6,
                            EventDate = new DateOnly(2025, 7, 8),
                            EventDescription = "Sosyal medya ve dijital pazarlama stratejileri üzerine workshop.",
                            EventImage = "event4.jpg",
                            EventIsActive = true,
                            EventIsHome = true,
                            EventLocation = "Bursa Teknopark",
                            EventName = "Dijital Pazarlama Eğitimi",
                            EventPrice = 350.0,
                            EventSubscriber = 100,
                            EventTime = "13:00 - 17:00",
                            LocationId = 4
                        });
                });

            modelBuilder.Entity("WebProjectEvent.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            LocationName = "İstanbul",
                            LocationUrl = "istanbul"
                        },
                        new
                        {
                            LocationId = 2,
                            LocationName = "Ankara",
                            LocationUrl = "ankara"
                        },
                        new
                        {
                            LocationId = 3,
                            LocationName = "İzmir",
                            LocationUrl = "izmir"
                        },
                        new
                        {
                            LocationId = 4,
                            LocationName = "Bursa",
                            LocationUrl = "bursa"
                        },
                        new
                        {
                            LocationId = 5,
                            LocationName = "Antalya",
                            LocationUrl = "antalya"
                        });
                });

            modelBuilder.Entity("WebProjectEvent.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("UserMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTicket")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebProjectEvent.Models.UserEvent", b =>
                {
                    b.Property<int>("UserEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserEventId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserEventId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEvents");
                });

            modelBuilder.Entity("WebProjectEvent.Models.Event", b =>
                {
                    b.HasOne("WebProjectEvent.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProjectEvent.Models.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("WebProjectEvent.Models.UserEvent", b =>
                {
                    b.HasOne("WebProjectEvent.Models.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProjectEvent.Models.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebProjectEvent.Models.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("WebProjectEvent.Models.Event", b =>
                {
                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("WebProjectEvent.Models.Location", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("WebProjectEvent.Models.User", b =>
                {
                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
